import asyncio
import logging
import aiohttp
from typing import Optional, Dict, List, Tuple
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InputFile, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.middleware import BaseMiddleware
from aiogram.types import Message, CallbackQuery
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from bs4 import BeautifulSoup
from datetime import datetime, timedelta
import validators
import matplotlib.pyplot as plt
import io
from config import TOKEN, YA_COOKIE, CHECK_INTERVAL, ADMIN_IDS
from database import Database
from functools import lru_cache
from aiohttp import ClientTimeout
from aiogram.exceptions import TelegramAPIError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è aiogram
    aiogram_logger = logging.getLogger('aiogram')
    aiogram_logger.setLevel(logging.INFO)
    aiogram_handler = logging.FileHandler('aiogram.log', encoding='utf-8')
    aiogram_handler.setFormatter(formatter)
    aiogram_logger.addHandler(aiogram_handler)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_logger = logging.getLogger('database')
    db_logger.setLevel(logging.INFO)
    db_handler = logging.FileHandler('database.log', encoding='utf-8')
    db_handler.setFormatter(formatter)
    db_logger.addHandler(db_handler)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞ –±–æ—Ç–∞
    bot_logger = logging.getLogger('bot')
    bot_logger.setLevel(logging.INFO)
    bot_handler = logging.FileHandler('bot.log', encoding='utf-8')
    bot_handler.setFormatter(formatter)
    bot_logger.addHandler(bot_handler)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –≤—Å–µ—Ö –ª–æ–≥–≥–µ—Ä–æ–≤
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formatter)
    aiogram_logger.addHandler(console_handler)
    db_logger.addHandler(console_handler)
    bot_logger.addHandler(console_handler)
    
    return bot_logger, db_logger, aiogram_logger

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–æ–≤
logger, db_logger, aiogram_logger = setup_logging()

class AccessMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É."""
    async def __call__(self, handler, event: Message | CallbackQuery, data):
        user_id = event.from_user.id
        if user_id not in ADMIN_IDS:
            if isinstance(event, Message):
                await event.answer(
                    "‚ùå –ë–æ—Ç –∑–∞–∫—Ä—ã—Ç –¥–ª—è –æ–±—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.\n"
                    "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
            else:
                await event.answer(
                    "‚ùå –ë–æ—Ç –∑–∞–∫—Ä—ã—Ç –¥–ª—è –æ–±—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.\n"
                    "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    show_alert=True
                )
            return
        return await handler(event, data)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
bot = Bot(token=TOKEN)
dp = Dispatcher()
dp.message.middleware(AccessMiddleware())
dp.callback_query.middleware(AccessMiddleware())
db = Database()

class ProductStates(StatesGroup):
    waiting_for_url = State()
    waiting_for_threshold = State()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ
async def get_product_info(url: str) -> Optional[Dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ —Å –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç–∞."""
    try:
        headers = {
            "Cookie": YA_COOKIE,
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36",
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
            "Accept-Language": "ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3",
            "Accept-Encoding": "gzip, deflate, br",
            "Connection": "keep-alive",
            "Upgrade-Insecure-Requests": "1",
            "Referer": "https://market.yandex.ru/"
        }
        
        timeout = ClientTimeout(total=30)
        logger.info(f"–ù–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ {url}")
        
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get(url, headers=headers) as response:
                if response.status == 200:
                    html = await response.text()
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç {url}, —Ä–∞–∑–º–µ—Ä: {len(html)} –±–∞–π—Ç")
                    
                    soup = BeautifulSoup(html, 'html.parser')
                    
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                    name_elem = soup.find('h1', {'data-auto': 'productCardTitle'})
                    if not name_elem:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {url}")
                        logger.debug(f"HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {html[:500]}...")  # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ HTML –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        return None
                    name = name_elem.text.strip()
                    logger.info(f"–ù–∞–π–¥–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {name}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É
                    price_elem = soup.find('span', {'data-auto': 'snippet-price-current'})
                    if not price_elem:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {url}")
                        return None
                    
                    try:
                        # –û—á–∏—â–∞–µ–º —Ü–µ–Ω—É –æ—Ç –≤—Å–µ—Ö –Ω–µ–≤–∏–¥–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
                        price_text = price_elem.text.strip()
                        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã Unicode
                        price_text = ''.join(char for char in price_text if char.isprintable())
                        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Å–∏–º–≤–æ–ª —Ä—É–±–ª—è
                        price_text = price_text.replace(' ', '').replace('‚ÇΩ', '')
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
                        price = int(price_text)
                        logger.info(f"–ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: {price}‚ÇΩ")
                    except ValueError as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ —Ü–µ–Ω—ã '{price_elem.text}': {e}")
                        logger.error(f"–û—á–∏—â–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞: '{price_text}'")
                        return None
                    
                    return {
                        'name': name,
                        'price': price
                    }
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {url}: {response.status}")
                    logger.error(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {response.headers}")
                    return None
    except aiohttp.ClientError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {url}: {e}")
        return None
    except asyncio.TimeoutError as e:
        logger.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {url}: {e}")
        return None
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ {url}: {e}")
        return None

def get_main_keyboard(user_id: int) -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
    products = db.get_user_products(user_id)
    keyboard = []
    
    if products:
        keyboard.extend([
            [KeyboardButton(text="üìã –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã"), KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")],
            [KeyboardButton(text="üìä –ì—Ä–∞—Ñ–∏–∫–∏ —Ü–µ–Ω")]
        ])
    else:
        keyboard.append([KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if user_id in ADMIN_IDS:
        keyboard[-1].append(KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"))
    
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def get_product_keyboard(product_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–º."""
    keyboard = [
        [
            InlineKeyboardButton(text="üìä –ì—Ä–∞—Ñ–∏–∫ (24—á)", callback_data=f"graph_{product_id}_24"),
            InlineKeyboardButton(text="üìä –ì—Ä–∞—Ñ–∏–∫ (7–¥)", callback_data=f"graph_{product_id}_168")
        ],
        [
            InlineKeyboardButton(text="‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥", callback_data=f"change_threshold_{product_id}"),
            InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{product_id}")
        ],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_list")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_time_range_keyboard(product_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞."""
    keyboard = [
        [
            InlineKeyboardButton(text="üìä 24 —á–∞—Å–∞", callback_data=f"graph_{product_id}_24"),
            InlineKeyboardButton(text="üìä 7 –¥–Ω–µ–π", callback_data=f"graph_{product_id}_168")
        ],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_graphs")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_threshold_keyboard(product_id: int = None) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ—Ä–æ–≥–∞."""
    keyboard = [
        [
            InlineKeyboardButton(text="‚ö°Ô∏è 500‚ÇΩ", callback_data=f"threshold_500_{product_id}" if product_id else "threshold_500"),
            InlineKeyboardButton(text="‚ö°Ô∏è 1000‚ÇΩ", callback_data=f"threshold_1000_{product_id}" if product_id else "threshold_1000")
        ],
        [
            InlineKeyboardButton(text="‚ö°Ô∏è 3000‚ÇΩ", callback_data=f"threshold_3000_{product_id}" if product_id else "threshold_3000"),
            InlineKeyboardButton(text="‚ö°Ô∏è 5000‚ÇΩ", callback_data=f"threshold_5000_{product_id}" if product_id else "threshold_5000")
        ],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_add")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_settings_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    keyboard = [
        [
            InlineKeyboardButton(text="‚è± 5 –º–∏–Ω—É—Ç", callback_data="interval_5"),
            InlineKeyboardButton(text="‚è± 10 –º–∏–Ω—É—Ç", callback_data="interval_10")
        ],
        [
            InlineKeyboardButton(text="‚è± 15 –º–∏–Ω—É—Ç", callback_data="interval_15"),
            InlineKeyboardButton(text="‚è± 30 –º–∏–Ω—É—Ç", callback_data="interval_30")
        ],
        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="check_now")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

async def generate_price_graph(product_id: int, hours: int) -> Optional[bytes]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω."""
    try:
        history = db.get_price_history(product_id, hours)
        if not history:
            return None

        prices = [price for price, _ in history]
        timestamps = [datetime.strptime(ts, '%Y-%m-%d %H:%M:%S') for _, ts in history]

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        product = db.get_product(product_id)
        product_name = product[2] if product else "–¢–æ–≤–∞—Ä"

        plt.figure(figsize=(10, 6))
        plt.plot(timestamps, prices, marker='o')
        plt.title(f'–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: {product_name}')
        plt.xlabel('–í—Ä–µ–º—è')
        plt.ylabel('–¶–µ–Ω–∞ (‚ÇΩ)')
        plt.grid(True)
        plt.xticks(rotation=45)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        if len(timestamps) > 1:
            time_range = max(timestamps) - min(timestamps)
            plt.xlim(min(timestamps) - time_range * 0.1, max(timestamps) + time_range * 0.1)
        else:
            # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Ç–æ—á–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ –≤ 1 —á–∞—Å
            single_time = timestamps[0]
            plt.xlim(single_time - timedelta(hours=0.5), single_time + timedelta(hours=0.5))
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
        plt.gca().xaxis.set_major_formatter(plt.matplotlib.dates.DateFormatter('%d.%m %H:%M'))
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –º–µ—Ç–∫–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏
        plt.gca().xaxis.set_major_locator(plt.matplotlib.dates.AutoDateLocator())
        
        buf = io.BytesIO()
        plt.savefig(buf, format='png', bbox_inches='tight')
        plt.close()
        buf.seek(0)
        return buf.getvalue()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
        return None

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç–µ.\n\n"
        "üîç –ß—Ç–æ —è —É–º–µ—é:\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—ã –Ω–∞ —Ç–æ–≤–∞—Ä—ã —Å –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç–∞\n"
        "‚Ä¢ –£–≤–µ–¥–æ–º–ª—è—Ç—å –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã\n"
        "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —Å–ø–∏—Å–∫–æ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤\n\n"
        "üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_message = await message.answer(
        welcome_text, 
        reply_markup=get_main_keyboard(message.from_user.id)
    )
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await welcome_message.pin(disable_notification=True)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    await message.answer(
        "‚ÑπÔ∏è –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä' –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç–∞."
    )

@dp.message(lambda message: message.text == "üìã –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã")
async def show_products(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    products = db.get_user_products(message.from_user.id)
    if not products:
        await message.reply("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.")
        return

    text = "üìã –í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:\n\n"
    keyboard = []
    for product_id, _, name, price, threshold in products:
        text += f"üì¶ {name}\nüí∞ –¶–µ–Ω–∞: {price}‚ÇΩ\n‚ö°Ô∏è –ü–æ—Ä–æ–≥: {threshold}‚ÇΩ\n\n"
        keyboard.append([
            InlineKeyboardButton(
                text=f"üì¶ {name} | {price}‚ÇΩ | ‚ö°Ô∏è {threshold}‚ÇΩ",
                callback_data=f"select_product_{product_id}"
            )
        ])
    
    await message.reply(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))

@dp.message(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def start_add_product(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞."""
    await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç–∞:")
    await state.set_state(ProductStates.waiting_for_url)

@dp.message(lambda message: message.text == "üìä –ì—Ä–∞—Ñ–∏–∫–∏ —Ü–µ–Ω")
async def show_graphs_menu(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≥—Ä–∞—Ñ–∏–∫–æ–≤."""
    products = db.get_user_products(message.from_user.id)
    if not products:
        await message.reply(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.\n"
            "–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω."
        )
        return

    text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–∞:"
    keyboard = []
    for product_id, _, name, _, _ in products:
        keyboard.append([
            InlineKeyboardButton(
                text=f"üìä {name}",
                callback_data=f"select_graph_{product_id}"
            )
        ])
    
    await message.reply(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))

@dp.message(lambda message: message.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def show_settings(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º.")
        return
        
    products_count = len(db.get_user_products(message.from_user.id))
    current_interval = db.get_check_interval()
    text = (
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:\n\n"
        f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {products_count}\n"
        f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω: –∫–∞–∂–¥—ã–µ {current_interval} –º–∏–Ω—É—Ç\n"
        f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {datetime.now().strftime('%H:%M:%S')}\n"
        f"‚Ä¢ –°—Ç–∞—Ç—É—Å: –∞–∫—Ç–∏–≤–µ–Ω\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω:"
    )
    await message.reply(text, reply_markup=get_settings_keyboard())

@dp.message(ProductStates.waiting_for_url)
async def process_url(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ URL —Ç–æ–≤–∞—Ä–∞."""
    url = message.text.strip()
    if not validators.url(url):
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π URL —Ç–æ–≤–∞—Ä–∞.")
        return

    product_info = await get_product_info(url)
    if not product_info:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É.")
        return

    await state.update_data(url=url, name=product_info["name"], price=product_info["price"])
    await message.reply(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã:\n"
        f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {product_info['price']}‚ÇΩ",
        reply_markup=get_threshold_keyboard()
    )
    await state.set_state(ProductStates.waiting_for_threshold)

@dp.message(ProductStates.waiting_for_threshold)
async def process_threshold(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ä–æ–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã."""
    try:
        threshold = int(message.text)
        if threshold <= 0:
            await message.reply("‚ùå –ü–æ—Ä–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
    except ValueError:
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    data = await state.get_data()
    if db.add_product(message.from_user.id, data["url"], data["name"], data["price"]):
        await message.reply(
            f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!\n"
            f"üì¶ {data['name']}\n"
            f"üí∞ –¶–µ–Ω–∞: {data['price']}‚ÇΩ\n"
            f"‚ö°Ô∏è –ü–æ—Ä–æ–≥: {threshold}‚ÇΩ",
            reply_markup=get_main_keyboard(message.from_user.id)
        )
    else:
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.")

    await state.clear()

@dp.callback_query(lambda c: c.data.startswith("graph_"))
async def process_graph_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–∫–∞–∑ –≥—Ä–∞—Ñ–∏–∫–∞."""
    _, product_id, hours = callback_query.data.split("_")
    product_id = int(product_id)
    hours = int(hours)

    graph_data = await generate_price_graph(product_id, hours)
    if graph_data:
        await callback_query.message.answer_photo(
            types.BufferedInputFile(graph_data, filename="graph.png"),
            caption=f"–ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤"
        )
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –≥—Ä–∞—Ñ–∏–∫–∞
        await callback_query.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_product_keyboard(product_id)
        )
    else:
        await callback_query.message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫.")

@dp.callback_query(lambda c: c.data.startswith("delete_"))
async def process_delete_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞."""
    product_id = int(callback_query.data.split("_")[1])
    if db.delete_product(product_id, callback_query.from_user.id):
        await callback_query.message.edit_text("‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω.")
    else:
        await callback_query.message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä.")

@dp.callback_query(lambda c: c.data.startswith("change_threshold_"))
async def process_threshold_update(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞."""
    product_id = int(callback_query.data.split("_")[2])
    product = db.get_product(product_id)
    if product:
        _, _, name, price, threshold = product
        await callback_query.message.edit_text(
            f"üì¶ {name}\n"
            f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {price}‚ÇΩ\n"
            f"‚ö°Ô∏è –¢–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥: {threshold}‚ÇΩ\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ—Ä–æ–≥:",
            reply_markup=get_threshold_keyboard(product_id)
        )
    else:
        await callback_query.message.edit_text("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@dp.callback_query(lambda c: c.data.startswith("threshold_"))
async def process_threshold_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ—Ä–æ–≥–∞."""
    try:
        parts = callback_query.data.split("_")
        threshold = int(parts[1])
        data = await state.get_data()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ
        if "url" in data:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
            if db.add_product(callback_query.from_user.id, data["url"], data["name"], data["price"], threshold):
                await callback_query.message.edit_text(
                    f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                    f"üì¶ {data['name']}\n"
                    f"üí∞ –¶–µ–Ω–∞: {data['price']}‚ÇΩ\n"
                    f"‚ö°Ô∏è –ü–æ—Ä–æ–≥: {threshold}‚ÇΩ"
                )
                await callback_query.message.answer(
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
                    reply_markup=get_main_keyboard(callback_query.from_user.id)
                )
            else:
                await callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.")
        elif len(parts) > 2:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä–æ–≥ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
            product_id = int(parts[2])
            if db.set_threshold(product_id, callback_query.from_user.id, threshold):
                product = db.get_product(product_id)
                if product:
                    _, _, name, price, _ = product
                    await callback_query.message.edit_text(
                        f"‚úÖ –ü–æ—Ä–æ–≥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n"
                        f"üì¶ {name}\n"
                        f"üí∞ –¶–µ–Ω–∞: {price}‚ÇΩ\n"
                        f"‚ö°Ô∏è –ù–æ–≤—ã–π –ø–æ—Ä–æ–≥: {threshold}‚ÇΩ",
                        reply_markup=get_product_keyboard(product_id)
                    )
                else:
                    await callback_query.message.edit_text("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            else:
                await callback_query.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥.")
        else:
            await callback_query.message.edit_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
        
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Ä–æ–≥–∞: {e}")
        await callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Ä–æ–≥–∞.")
        await state.clear()

@dp.callback_query(lambda c: c.data.startswith("select_graph_"))
async def process_graph_selection(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞."""
    product_id = int(callback_query.data.split("_")[2])
    await callback_query.message.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞:",
        reply_markup=get_time_range_keyboard(product_id)
    )

@dp.callback_query(lambda c: c.data.startswith("select_product_"))
async def process_product_selection(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞."""
    product_id = int(callback_query.data.split("_")[2])
    product = db.get_product(product_id)
    if product:
        _, _, name, price, threshold = product
        text = f"üì¶ {name}\nüí∞ –¶–µ–Ω–∞: {price}‚ÇΩ\n‚ö°Ô∏è –ü–æ—Ä–æ–≥: {threshold}‚ÇΩ"
        await callback_query.message.edit_text(text, reply_markup=get_product_keyboard(product_id))
    else:
        await callback_query.message.edit_text("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@dp.callback_query(lambda c: c.data == "back_to_list")
async def process_back_to_list(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤."""
    products = db.get_user_products(callback_query.from_user.id)
    if not products:
        await callback_query.message.edit_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.")
        return

    text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    keyboard = []
    for product_id, _, name, price, threshold in products:
        keyboard.append([
            InlineKeyboardButton(
                text=f"üì¶ {name} | {price}‚ÇΩ | ‚ö°Ô∏è {threshold}‚ÇΩ",
                callback_data=f"select_product_{product_id}"
            )
        ])
    
    await callback_query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))

@dp.callback_query(lambda c: c.data == "back_to_graphs")
async def process_back_to_graphs(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤."""
    products = db.get_user_products(callback_query.from_user.id)
    if not products:
        await callback_query.message.edit_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.\n"
            "–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω."
        )
        return

    text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–∞:"
    keyboard = []
    for product_id, _, name, _, _ in products:
        keyboard.append([
            InlineKeyboardButton(
                text=f"üìä {name}",
                callback_data=f"select_graph_{product_id}"
            )
        ])
    
    await callback_query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))

@dp.callback_query(lambda c: c.data == "back_to_add")
async def process_back_to_add(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–∞."""
    await callback_query.message.edit_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç–∞:")
    await state.set_state(ProductStates.waiting_for_url)

@dp.callback_query(lambda c: c.data.startswith("interval_"))
async def process_interval_selection(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    if callback_query.from_user.id not in ADMIN_IDS:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º.", show_alert=True)
        return
        
    try:
        interval = int(callback_query.data.split("_")[1])
        if interval not in [5, 10, 15, 30]:
            raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª")
            
        if db.set_check_interval(interval):
            await callback_query.message.edit_text(
                f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {interval} –º–∏–Ω—É—Ç.\n\n"
                "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:\n"
                f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {len(db.get_user_products(callback_query.from_user.id))}\n"
                f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω: –∫–∞–∂–¥—ã–µ {interval} –º–∏–Ω—É—Ç\n"
                f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {datetime.now().strftime('%H:%M:%S')}\n"
                f"‚Ä¢ –°—Ç–∞—Ç—É—Å: –∞–∫—Ç–∏–≤–µ–Ω\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω:",
                reply_markup=get_settings_keyboard()
            )
            await callback_query.answer("‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω")
        else:
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query(lambda c: c.data == "back_to_main")
async def process_back_to_main(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard(callback_query.from_user.id)
    )

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    help_text = (
        "üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
        "üîç –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "‚Ä¢ /settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)\n\n"
        "üì± –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:\n"
        "1. –ù–∞–∂–º–∏—Ç–µ '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä'\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç–∞\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã\n"
        "4. –ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã\n\n"
        "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏:\n"
        "‚Ä¢ 'üìã –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã' - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤\n"
        "‚Ä¢ 'üìä –ì—Ä–∞—Ñ–∏–∫–∏ —Ü–µ–Ω' - –ø—Ä–æ—Å–º–æ—Ç—Ä –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω\n"
        "‚Ä¢ –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã:\n"
        "  - –ü—Ä–æ—Å–º–æ—Ç—Ä –≥—Ä–∞—Ñ–∏–∫–∞ –∑–∞ 24 —á–∞—Å–∞ –∏–ª–∏ 7 –¥–Ω–µ–π\n"
        "  - –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        "  - –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n\n"
        "‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:\n"
        "‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–Ω—ã –∫–∞–∂–¥—ã–µ 5-30 –º–∏–Ω—É—Ç\n"
        "‚Ä¢ –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n"
        "‚Ä¢ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –∏—Å—Ç–æ—Ä–∏–∏"
    )
    await message.answer(help_text, reply_markup=get_main_keyboard(message.from_user.id))

# async def check_prices():
#     """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤."""
#     logger.info("=== –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω ===")
#     try:
#         products = db.get_all_products()
#         logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {len(products)}")
        
#         # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ user_id –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
#         user_ids = set()
        
#         for product_id, user_id, url, last_price, threshold in products:
#             logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–≤–∞—Ä–∞ {product_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
#             logger.info(f"  ‚Ä¢ URL: {url}")
#             logger.info(f"  ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {last_price}‚ÇΩ")
#             logger.info(f"  ‚Ä¢ –ü–æ—Ä–æ–≥: {threshold}‚ÇΩ")
#             await check_single_product(product_id, user_id, url, last_price, threshold)
#             user_ids.add(user_id)
        
#         # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#         for user_id in user_ids:
#             try:
#                 user_products = db.get_user_products(user_id)
#                 if user_products:
#                     text = "üìã –í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:\n\n"
#                     keyboard = []
#                     for product_id, _, name, price, threshold in user_products:
#                         text += f"üì¶ {name}\nüí∞ –¶–µ–Ω–∞: {price}‚ÇΩ\n‚ö°Ô∏è –ü–æ—Ä–æ–≥: {threshold}‚ÇΩ\n\n"
#                         keyboard.append([
#                             InlineKeyboardButton(
#                                 text=f"üì¶ {name} | {price}‚ÇΩ | ‚ö°Ô∏è {threshold}‚ÇΩ",
#                                 callback_data=f"select_product_{product_id}"
#                             )
#                         ])
#                     await bot.send_message(user_id, text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
#             except Exception as e:
#                 logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            
#         logger.info("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ===")
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–Ω: {e}")

async def check_prices():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤."""
    logger.info("=== –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω ===")
    try:
        products = db.get_all_products()
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {len(products)}")
        
        for product_id, user_id, url, last_price, threshold in products:
            logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–≤–∞—Ä–∞ {product_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await check_single_product(product_id, user_id, url, last_price, threshold)
        
        logger.info("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ===")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–Ω: {e}")

async def check_single_product(product_id: int, user_id: int, url: str, last_price: int, threshold: int):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞."""
    try:
        product_info = await get_product_info(url)
        if not product_info:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ {product_id}")
            return
            
        current_price = product_info["price"]
        price_diff = current_price - last_price
        abs_price_diff = abs(price_diff)
        
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–∞ {product_id}:")
        logger.info(f"  ‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {product_info['name']}")
        logger.info(f"  ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {last_price}‚ÇΩ")
        logger.info(f"  ‚Ä¢ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price}‚ÇΩ")
        logger.info(f"  ‚Ä¢ –†–∞–∑–Ω–∏—Ü–∞: {price_diff}‚ÇΩ")
        logger.info(f"  ‚Ä¢ –ú–æ–¥—É–ª—å —Ä–∞–∑–Ω–∏—Ü—ã: {abs_price_diff}‚ÇΩ")
        logger.info(f"  ‚Ä¢ –ü–æ—Ä–æ–≥: {threshold}‚ÇΩ")
        
        if abs_price_diff >= threshold:
            try:
                if price_diff > 0:
                    message = (
                        f"üìà –¶–µ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞!\n"
                        f"üì¶ {product_info['name']}\n"
                        f"–ë—ã–ª–∞: {last_price}‚ÇΩ, —Å—Ç–∞–ª–∞: {current_price}‚ÇΩ\n"
                        f"–†–∞–∑–Ω–∏—Ü–∞: +{price_diff}‚ÇΩ"
                    )
                    logger.info(f"  ‚Ä¢ –°—Ç–∞—Ç—É—Å: –¶–µ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ {price_diff}‚ÇΩ (–ø—Ä–µ–≤—ã—à–µ–Ω –ø–æ—Ä–æ–≥ {threshold}‚ÇΩ)")
                else:
                    message = (
                        f"üìâ –¶–µ–Ω–∞ —É–ø–∞–ª–∞!\n"
                        f"üì¶ {product_info['name']}\n"
                        f"–ë—ã–ª–∞: {last_price}‚ÇΩ, —Å—Ç–∞–ª–∞: {current_price}‚ÇΩ\n"
                        f"–†–∞–∑–Ω–∏—Ü–∞: {price_diff}‚ÇΩ"
                    )
                    logger.info(f"  ‚Ä¢ –°—Ç–∞—Ç—É—Å: –¶–µ–Ω–∞ —É–ø–∞–ª–∞ –Ω–∞ {abs_price_diff}‚ÇΩ (–ø—Ä–µ–≤—ã—à–µ–Ω –ø–æ—Ä–æ–≥ {threshold}‚ÇΩ)")
                
                logger.info(f"  ‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                await bot.send_message(user_id, message)
                aiogram_logger.info(f"  ‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                
                if db.update_price(product_id, current_price):
                    db_logger.info(f"  ‚Ä¢ –¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                else:
                    db_logger.error(f"  ‚Ä¢ –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            except TelegramAPIError as e:
                aiogram_logger.error(f"  ‚Ä¢ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        else:
            # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –Ω–æ –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∞ –ø–æ—Ä–æ–≥–∞, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë
            if price_diff != 0:
                db.update_price(product_id, current_price)
                logger.info(f"  ‚Ä¢ –°—Ç–∞—Ç—É—Å: –¶–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –Ω–∞ {price_diff}‚ÇΩ (–Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ø–æ—Ä–æ–≥ {threshold}‚ÇΩ)")
            else:
                logger.info(f"  ‚Ä¢ –°—Ç–∞—Ç—É—Å: –¶–µ–Ω–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–≤–∞—Ä–∞ {product_id}: {e}")

@dp.callback_query(lambda c: c.data == "check_now")
async def process_check_now(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–Ω."""
    if callback_query.from_user.id not in ADMIN_IDS:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º.", show_alert=True)
        return
    
    await callback_query.message.edit_text("üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–Ω...")
    await check_prices()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    products = db.get_user_products(callback_query.from_user.id)
    products_count = len(products)
    current_interval = db.get_check_interval()
    text = (
        "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:\n"
        f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {products_count}\n"
        f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω: –∫–∞–∂–¥—ã–µ {current_interval} –º–∏–Ω—É—Ç\n"
        f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {datetime.now().strftime('%H:%M:%S')}\n"
        f"‚Ä¢ –°—Ç–∞—Ç—É—Å: –∞–∫—Ç–∏–≤–µ–Ω\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    await callback_query.message.answer(text, reply_markup=get_settings_keyboard())
    await callback_query.answer("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
        await check_prices()  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
        
        scheduler = AsyncIOScheduler()
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        check_interval = db.get_check_interval()
        scheduler.add_job(check_prices, "interval", minutes=check_interval)
        scheduler.start()
        
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        db.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")